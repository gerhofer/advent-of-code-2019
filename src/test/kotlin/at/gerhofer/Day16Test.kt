package at.gerhofer

import io.kotlintest.shouldBe
import io.kotlintest.specs.FunSpec

class Day16Test : FunSpec() {

    init {

        test("test FFT correction algorithm 1") {
            Day16.calculatePhase(1, listOf(1, 2, 3, 4, 5, 6, 7, 8)) shouldBe listOf(4, 8, 2, 2, 6, 1, 5, 8)
            Day16.calculatePhase(2, listOf(1, 2, 3, 4, 5, 6, 7, 8)) shouldBe listOf(3, 4, 0, 4, 0, 4, 3, 8)
            Day16.calculatePhase(3, listOf(1, 2, 3, 4, 5, 6, 7, 8)) shouldBe listOf(0, 3, 4, 1, 5, 5, 1, 8)
            Day16.calculatePhase(4, listOf(1, 2, 3, 4, 5, 6, 7, 8)) shouldBe listOf(0, 1, 0, 2, 9, 4, 9, 8)
        }

        test("test FFT correction algorithm 2") {
            Day16.calculatePhase(100, "80871224585914546619083218645595".map { it.toString().toInt() }) shouldBe "24176176".map { it.toString().toInt() }
            Day16.calculatePhase(100, "19617804207202209144916044189917".map { it.toString().toInt() }) shouldBe "73745418".map { it.toString().toInt() }
            Day16.calculatePhase(100, "69317163492948606335995924319873".map { it.toString().toInt() }) shouldBe "52432133".map { it.toString().toInt() }
        }

        test("test abl") {
            println("Go abl:")
            println(Day16.calculatePhase(100, "59768092839927758565191298625215106371890118051426250855924764194411528004718709886402903435569627982485301921649240820059827161024631612290005106304724846680415690183371469037418126383450370741078684974598662642956794012825271487329243583117537873565332166744128845006806878717955946534158837370451935919790469815143341599820016469368684893122766857261426799636559525003877090579845725676481276977781270627558901433501565337409716858949203430181103278194428546385063911239478804717744977998841434061688000383456176494210691861957243370245170223862304663932874454624234226361642678259020094801774825694423060700312504286475305674864442250709029812379".map { it.toString().toInt() }))
        }

        test("test pia") {
            println("Go pia:")
            println(Day16.calculatePhase(100, "59719896749391372935980241840868095901909650477974922926863874668817926756504816327136638260644919270589305499504699701736406883012172909202912675166762841246709052187371758225695359676410279518694947094323466110604412184843328145082858383186144864220867912457193726817225273989002642178918584132902751560672461100948770988856677526693132615515437829437045916042287792937505148994701494994595404345537543400830028374701775936185956190469052693669806665481610052844626982468241111349622754998877546914382626821708059755592288986918651172943415960912020715327234415148476336205299713749014282618817141515873262264265988745414393060010837408970796104077".map { it.toString().toInt() }))
        }

        test("test FFT correction algorithm 2adsfasdf") {
            Day16.calculatePhaseFor100000(1, "59768092839927758565191298625215106371890118051426250855924764194411528004718709886402903435569627982485301921649240820059827161024631612290005106304724846680415690183371469037418126383450370741078684974598662642956794012825271487329243583117537873565332166744128845006806878717955946534158837370451935919790469815143341599820016469368684893122766857261426799636559525003877090579845725676481276977781270627558901433501565337409716858949203430181103278194428546385063911239478804717744977998841434061688000383456176494210691861957243370245170223862304663932874454624234226361642678259020094801774825694423060700312504286475305674864442250709029812379".map { it.toString().toInt() }) shouldBe "24176176".map { it.toString().toInt() }
        }
    }

}
